basePath: /
definitions:
  http.ErrorSchema:
    properties:
      message:
        type: string
    type: object
  http.HealthSchema:
    properties:
      healthy:
        type: boolean
    type: object
  http.RouterListSchema:
    properties:
      routers:
        items:
          $ref: '#/definitions/routers.LangRouterConfig'
        type: array
    type: object
  openai.Config:
    properties:
      apiKey:
        type: string
      baseUrl:
        type: string
      chatEndpoint:
        type: string
      defaultParams:
        $ref: '#/definitions/openai.Params'
      model:
        type: string
    required:
    - apiKey
    type: object
  openai.Params:
    properties:
      frequency_penalty:
        type: integer
      logit_bias:
        additionalProperties:
          type: number
        type: object
      max_tokens:
        type: integer
      "n":
        type: integer
      presence_penalty:
        type: integer
      response_format:
        description: 'TODO: should this be a part of the chat request API?'
      seed:
        type: integer
      stop:
        items:
          type: string
        type: array
      temperature:
        type: number
      tool_choice: {}
      tools:
        items:
          type: string
        type: array
      top_p:
        type: number
      user:
        type: string
    type: object
  providers.LangModelConfig:
    properties:
      enabled:
        type: boolean
      id:
        type: string
      openai:
        $ref: '#/definitions/openai.Config'
      timeout:
        type: integer
    type: object
  routers.LangRouterConfig:
    properties:
      enabled:
        type: boolean
      models:
        items:
          $ref: '#/definitions/providers.LangModelConfig'
        type: array
      routers:
        type: string
      strategy:
        $ref: '#/definitions/strategy.RoutingStrategy'
    type: object
  schemas.ChatChoice:
    properties:
      finish_reason:
        type: string
      index:
        type: integer
      message:
        $ref: '#/definitions/schemas.ChatMessage'
    type: object
  schemas.ChatMessage:
    properties:
      content:
        description: The content of the message.
        type: string
      name:
        description: |-
          The name of the author of this message. May contain a-z, A-Z, 0-9, and underscores,
          with a maximum length of 64 characters.
        type: string
      role:
        description: The role of the author of this message. One of system, user,
          or assistant.
        type: string
    type: object
  schemas.UnifiedChatRequest:
    properties:
      message:
        $ref: '#/definitions/schemas.ChatMessage'
      messageHistory:
        items:
          $ref: '#/definitions/schemas.ChatMessage'
        type: array
    type: object
  schemas.UnifiedChatResponse:
    properties:
      choices:
        items:
          $ref: '#/definitions/schemas.ChatChoice'
        type: array
      created:
        type: number
      id:
        type: string
      model:
        type: string
      object:
        description: 'TODO: what does this mean "Object"?'
        type: string
      usage:
        $ref: '#/definitions/schemas.Usage'
    type: object
  schemas.Usage:
    properties:
      completion_tokens:
        type: number
      prompt_tokens:
        type: number
      total_tokens:
        type: number
    type: object
  strategy.RoutingStrategy:
    enum:
    - priority
    type: string
    x-enum-varnames:
    - Priority
host: localhost:9099
info:
  contact:
    name: Glide Community
    url: https://github.com/modelgateway/glide
  description: API documentation for Glide, an open-source lightweight high-performance
    model gateway
  license:
    name: Apache 2.0
    url: https://github.com/modelgateway/glide/blob/develop/LICENSE
  title: Glide Gateway
  version: "1.0"
paths:
  /v1/health/:
    get:
      consumes:
      - application/json
      operationId: glide-health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.HealthSchema'
      summary: Gateway Health
      tags:
      - Operations
  /v1/language/:
    get:
      consumes:
      - application/json
      description: Retrieve list of configured language routers and their configurations
      operationId: glide-language-routers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.RouterListSchema'
      summary: Language Router List
      tags:
      - Language
  /v1/language/{router}/chat:
    post:
      consumes:
      - application/json
      description: Talk to different LLMs Chat API via unified endpoint
      operationId: glide-language-chat
      parameters:
      - description: Router ID
        in: path
        name: router
        required: true
        type: string
      - description: Request Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.UnifiedChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UnifiedChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorSchema'
      summary: Language Chat
      tags:
      - Language
schemes:
- http
swagger: "2.0"
